select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary() %>% as_tibble(.name_repair = "unique")
colnames(outcome_summary)
#App Outcomes Summary ----
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary() %>% as_tibble(.name_repair = "unique") %>%
select(-...1) %>%
slice(-1:7)
?slice
#App Outcomes Summary ----
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary() %>% as_tibble(.name_repair = "unique") %>%
select(-...1) %>%
slice_head(n=-7)
#App Outcomes Summary ----
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary() %>% as_tibble(.name_repair = "unique") %>%
select(-...1) %>%
slice_head(n=7)
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary() %>% as_tibble(.name_repair = "unique") %>%
select(-...1)
?separate
#App Outcomes Summary ----
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary() %>% as_tibble(.name_repair = "unique") %>%
select(-...1) %>%
separate(col = n, into = c(statistic, value), sep = ":")
#App Outcomes Summary ----
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary() %>% as_tibble(.name_repair = "unique") %>%
select(-...1) %>%
separate(col = n, into = c("statistic", "value"), sep = ":")
#App Outcomes Summary ----
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary() %>% as_tibble(.name_repair = "unique") %>%
select(-...1) %>%
separate(col = n, into = c("statistic", "value"), sep = ":") %>%
mutate(statistic = case_when(
statistic == "Min." ~ "Minimum",
statistic == "1st Qu." ~ "1st Quartile",
statistic == "3rd Qu." ~ "3rd Quartile",
statistic == "Max." ~ "Maximum",
TRUE ~ statistic
),
value = round(as.numeric(value), n=1))
?round
#App Outcomes Summary ----
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary() %>% as_tibble(.name_repair = "unique") %>%
select(-...1) %>%
separate(col = n, into = c("statistic", "value"), sep = ":") %>%
mutate(statistic = case_when(
statistic == "Min." ~ "Minimum",
statistic == "1st Qu." ~ "1st Quartile",
statistic == "3rd Qu." ~ "3rd Quartile",
statistic == "Max." ~ "Maximum",
TRUE ~ statistic
),
value = round(as.numeric(value), digits = 1))
outcome_summary
#App Outcomes Summary ----
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary() %>% as_tibble(.name_repair = "unique") %>%
select(-...1) %>%
separate(col = n, into = c("statistic", "value"), sep = ":") %>%
mutate(statistic = case_when(
statistic == "Min.   " ~ "Minimum",
statistic == "1st Qu." ~ "1st Quartile",
statistic == "3rd Qu." ~ "3rd Quartile",
statistic == "Max.   " ~ "Maximum",
TRUE ~ statistic
),
value = round(as.numeric(value), digits = 1))
#App Outcomes Summary ----
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary() %>% as_tibble(.name_repair = "unique") %>%
select(-...1) %>%
separate(col = n, into = c("statistic", "value"), sep = ":") %>%
mutate(statistic = case_when(
statistic == "Min.   " ~ "Minimum",
statistic == "1st Qu." ~ "1st Quartile",
statistic == "3rd Qu." ~ "3rd Quartile",
statistic == "Max.   " ~ "Maximum",
TRUE ~ statistic
),
value = round(as.numeric(value), digits = 1)) %>%
spread(-...2, key = "statistic", value = "value")
#App Outcomes Summary ----
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary() %>% as_tibble(.name_repair = "unique") %>%
select(-...1) %>%
separate(col = n, into = c("statistic", "value"), sep = ":") %>%
mutate(statistic = case_when(
statistic == "Min.   " ~ "Minimum",
statistic == "1st Qu." ~ "1st Quartile",
statistic == "3rd Qu." ~ "3rd Quartile",
statistic == "Max.   " ~ "Maximum",
TRUE ~ statistic
),
value = round(as.numeric(value), digits = 1)) %>%
spread(key = "statistic", value = "value")
#App Outcomes Summary ----
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary() %>% as_tibble(.name_repair = "unique") %>%
select(-...1) %>%
separate(col = n, into = c("statistic", "value"), sep = ":") %>%
mutate(statistic = case_when(
statistic == "Min.   " ~ "Minimum",
statistic == "1st Qu." ~ "1st Quartile",
statistic == "3rd Qu." ~ "3rd Quartile",
statistic == "Max.   " ~ "Maximum",
TRUE ~ statistic
),
value = round(as.numeric(value), digits = 1)) %>%
spread(key = "statistic", value = "value", -...2)
?spread
#App Outcomes Summary ----
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary() %>% as_tibble(.name_repair = "unique") %>%
select(-...1) %>%
separate(col = n, into = c("statistic", "value"), sep = ":") %>%
mutate(statistic = case_when(
statistic == "Min.   " ~ "Minimum",
statistic == "1st Qu." ~ "1st Quartile",
statistic == "3rd Qu." ~ "3rd Quartile",
statistic == "Max.   " ~ "Maximum",
TRUE ~ statistic
),
value = round(as.numeric(value), digits = 1)) %>%
spread(statistic, value)
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary()
str(outcome_summary)
outcome_summary[2]
outcome_summary[[2]]
outcome_summary[[1]]
outcome_summary[][[1]]
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary() %>% as_tibble(.name_repair = "unique") %>%
select(-...1) %>%
spread(Var2, Freq)
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary() %>% as_tibble(.name_repair = "unique") %>%
select(-...1) %>%
spread(...2, Freq)
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary() %>% as_tibble(.name_repair = "unique") %>%
select(-...1)
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
summary() %>% as_tibble(.name_repair = "unique") %>%
select(-...1) %>%
spread(...2, n)
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
gather(application_cycles:rejections_recieved)
?gather
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
gather(application_cycles:rejections_recieved, key = "question", value = "response")
?IQR
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
gather(application_cycles:rejections_recieved, key = "question", value = "response") %>%
group_by(question) %>%
summarise("n" = n(response), "Minimum" = min(response), "IQR" = IQR(response, na.rm = TRUE),
"Maximum" = max(response), "Mean" = mean(response), "Median" = median(response))
?summarise
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
gather(application_cycles:rejections_recieved, key = "question", value = "response") %>%
group_by(question) %>%
summarise(n = n(response), Minimum = min(response), IQR = IQR(response, na.rm = TRUE),
Maximum = max(response), Mean = mean(response), Median = median(response))
#App Outcomes Summary ----
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
gather(application_cycles:rejections_recieved, key = "question", value = "response") %>%
group_by(question) %>%
summarise(n = n(), Minimum = min(response), IQR = IQR(response, na.rm = TRUE),
Maximum = max(response), Mean = mean(response), Median = median(response))
?min
#App Outcomes Summary ----
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
gather(application_cycles:rejections_recieved, key = "question", value = "response") %>%
group_by(question) %>%
summarise(n = n(), Minimum = min(response, na.rm = TRUE), IQR = IQR(response, na.rm = TRUE),
Maximum = max(response, na.rm = TRUE), Mean = mean(response, na.rm = TRUE),
Median = median(response, na.rm = TRUE))
#App Outcomes Summary ----
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
gather(application_cycles:rejections_recieved, key = "question", value = "response") %>%
group_by(question) %>%
summarise(Minimum = min(response, na.rm = TRUE), IQR = IQR(response, na.rm = TRUE),
Maximum = max(response, na.rm = TRUE), Mean = round(mean(response, na.rm = TRUE), digits = 2),
Median = median(response, na.rm = TRUE))
#App Outcomes Summary ----
outcome_summary <- app_outcomes %>%
mutate(across(c(1:4, 6, 9, 13, 14), as.numeric)) %>%
select(id, application_cycles, apps_submitted, R1_apps_submitted,
PUI_apps_submitted, off_site_interviews, on_site_interviews,
faculty_offers, rejections_recieved) %>%
gather(application_cycles:rejections_recieved, key = "Statistic", value = "response") %>%
group_by(Statistic) %>%
summarise(Minimum = min(response, na.rm = TRUE), IQR = IQR(response, na.rm = TRUE),
Maximum = max(response, na.rm = TRUE), Mean = round(mean(response, na.rm = TRUE), digits = 2),
Median = median(response, na.rm = TRUE))
kable(outcome_summary)
View(demographics)
#income vs responses
income_data <- demographics %>%
select(id, income, financial_support, extra_income)
offer_response_data <- app_outcomes %>%
select(id, offer_responses)
View(offer_response_data)
View(income_data)
#income vs responses
income_data <- demographics %>%
select(id, income, financial_support, extra_income) %>%
filter(!is.na(income))
offer_response_data <- app_outcomes %>%
select(id, offer_responses) %>%
!is.na(offer_responses)
offer_response_data <- app_outcomes %>%
select(id, offer_response) %>%
!is.na(offer_response)
offer_response_data <- app_outcomes %>%
select(id, offer_responses) %>%
filter(!is.na(offer_responses))
View(outcome_data)
offer_response_data <- outcome_data %>%
filter(question = "offer_responses")
offer_response_data <- outcome_data %>%
filter(question == "offer_responses")
offer_response_data <- outcome_data %>%
select(-section) %>%
filter(question == "offer_responses") %>%
filter(!is.na(responses))
offer_response_data <- outcome_data %>%
select(-section) %>%
filter(question == "offer_responses") %>%
filter(!is.na(response))
#income vs responses
income_data <- demographics %>%
select(-section) %>%
select(id, income, financial_support, extra_income) %>%
filter(!is.na(income))
#income vs responses
income_data <- demographics %>%
select(id, income, financial_support, extra_income) %>%
filter(!is.na(income))
income_plot1 <- left_join(offer_response_data, income_data, by = "id")
View(income_plot1)
offer_response_data <- outcome_data %>%
select(-section) %>%
filter(question == "offer_responses") %>%
filter(!is.na(response)) %>%
select(-question)
income_plot1 <- left_join(offer_response_data, income_data, by = "id") %>%
count(response)
income_plot1 <- left_join(offer_response_data, income_data, by = "id") %>%
count(response, income)
offer_response_data <- outcome_data %>%
select(-section) %>%
filter(question == "offer_responses") %>%
filter(str_detect(response, "Reject") == TRUE)
offer_response_data <- outcome_data %>%
select(-section) %>%
filter(question == "offer_responses") %>%
filter(str_detect(response, "Reject") == TRUE) %>%
select(id) %>% distinct()
income_plot1 <- left_join(offer_response_data, income_data, by = "id") %>%
count(response, income)
income_plot1 <- left_join(offer_response_data, income_data, by = "id") %>%
count(income)
income_data <- demo_data %>%
filter(question == "income"| question == "financial_support"| question == "extra_income")
#income vs responses
income_data <- demo_data %>%
filter(question == "income"| question == "financial_support"| question == "extra_income") %>%
select(-section)
income_plot1 <- left_join(offer_response_data, income_data, by = "id") %>%
count(question, response)
income_plot1 <- left_join(offer_response_data, income_data, by = "id") %>%
count(question, response) %>%
filter(!is.na(response))
left_join(offer_response_data, income_data, by = "id") %>%
count(question, response) %>%
filter(!is.na(response)) %>%
ggplot()+
geom_col(aes(x = response, y = n, fill = question))+
facet_wrap(~question)
left_join(offer_response_data, income_data, by = "id") %>%
count(question, response) %>%
filter(!is.na(response)) %>%
ggplot()+
geom_col(aes(x = response, y = n, fill = question))+
facet_wrap(~question, scales = "free")+
coord_flip()
left_join(offer_response_data, income_data, by = "id") %>%
count(question, response) %>%
filter(!is.na(response)) %>%
ggplot()+
geom_col(aes(x = response, y = n, fill = question))+
facet_wrap(~question, scales = "free_x")+
coord_flip()+
theme(legend.position = "none")
left_join(offer_response_data, income_data, by = "id") %>%
count(question, response) %>%
filter(!is.na(response)) %>%
ggplot()+
geom_col(aes(x = response, y = n, fill = question))+
facet_wrap(~question, scales = "free_y")+
coord_flip()+
theme(legend.position = "none")
left_join(offer_response_data, income_data, by = "id") %>%
count(question, response) %>%
filter(!is.na(response)) %>%
ggplot()+
geom_col(aes(x = response, y = n, fill = question))+
facet_grid(~question, scales = "free_y")+
coord_flip()+
theme(legend.position = "none")
left_join(offer_response_data, income_data, by = "id") %>%
count(question, response) %>%
filter(!is.na(response)) %>%
ggplot()+
geom_col(aes(x = response, y = n, fill = question))+
facet_grid(~question, scales = "free_x")+
coord_flip()+
theme(legend.position = "none")
left_join(offer_response_data, income_data, by = "id") %>%
count(question, response) %>%
filter(!is.na(response)) %>%
ggplot()+
geom_col(aes(x = response, y = n, fill = question))+
facet_grid(~question, scales = "free_x")+
coord_flip()+
labs(y = "Number of respondents that rejected at least 1 offer")
?theme
?facet_grid
left_join(offer_response_data, income_data, by = "id") %>%
count(question, response) %>%
filter(!is.na(response)) %>%
ggplot()+
geom_col(aes(x = response, y = n, fill = question))+
facet_grid(~question, scales = "free_y")+
coord_flip()+
labs(y = "Number of respondents that rejected at least 1 offer")+
theme(legend.position = "none")
left_join(offer_response_data, income_data, by = "id") %>%
count(question, response) %>%
filter(!is.na(response)) %>%
ggplot()+
geom_col(aes(x = response, y = n, fill = question))+
facet_wrap(~question, scales = "free_y")+
coord_flip()+
labs(y = "Number of respondents that rejected at least 1 offer")+
theme(legend.position = "none")
?facet_wrap
left_join(offer_response_data, income_data, by = "id") %>%
count(question, response) %>%
filter(!is.na(response)) %>%
ggplot()+
geom_col(aes(x = response, y = n, fill = question))+
facet_wrap(~question, scales = "free_y", ncol = 1)+
coord_flip()+
labs(y = "Number of respondents that rejected at least 1 offer")+
theme(legend.position = "none")
eth_demo_plots[1]
tidy_eth <- tidy_data %>%
filter(section == "demographic") %>%
filter(question == "race_ethnicity") %>%
select(-section) %>%
distinct() %>%
rowid_to_column(., var = "dummy_id") %>%
spread(question, response)
tidy_eth_data <- left_join(tidy_data, tidy_eth, by = "id") %>%
select(-dummy_id) %>%
filter(question != "race_ethnicity") %>%
distinct()
eth_plots <- map(section_list, function(s){
map(question_list, function(p){
plot_raw_data(tidy_eth_data, s, p, "race_ethnicity")})
})
eth_demo_plots <- compact(eth_plots[[1]])
eth_qual_plots <- compact(eth_plots[[2]])
eth_percept_plots <- compact(eth_plots[[3]])
eth_prep_plots <- compact(eth_plots[[4]])
eth_outcome_plots <- compact(eth_plots[[5]])
eth_network_plots <- compact(eth_plots[[6]])
eth_demo_plots[1]
#generate full figure----
eth_legend <- get_legend(eth_demo_plots[1])
eth_legend
eth_leg <- plot_raw_data(tidy_eth_data, "demographic", "gender", "race_ethnicity")
#generate full figure----
eth_legend <- get_legend(eth_leg)
eth_legend
plot_grid(blank, eth_legend, blank, nrow = 1)
eth_leg <- plot_raw_data(tidy_eth_data, "demographic", "gender", "race_ethnicity")+
theme(legend.position = "right")
#generate full figure----
eth_legend <- get_legend(eth_leg)
plot_legend <- plot_grid(eth_legend, nrow = 1)
plot_grid(eth_legend, nrow = 1)
Sys.Date()
today<-Sys.Date()
rmarkdown::render(input = "code/digest_template.Rmd",
output_file = paste0("digest_", today),
output_dir = "output")
setwd("~/digest_curation")
rmarkdown::render(input = "code/digest_template.Rmd",
output_file = paste0("digest_", today),
output_dir = "output")
